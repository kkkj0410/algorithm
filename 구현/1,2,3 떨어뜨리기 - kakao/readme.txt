요약 : 트리 주어짐. 1,2,3 중 1개를 루트에서 떨어뜨림. 기본 경로는 숫자가 낮은 순으로, 노드 1→2→4 순으로가서 4에 1~3 숫자가 떨어짐. 경로가 사용되면 경로가 바뀜(다음으로 숫자가 높은 노드로 경로가 바뀜)

1. 자료구조
    
    ArrayList : 각 노드의 개수만큼 사이즈 만들어냄
    
    Queue : ArrayList안에 Queue를 생성. 사용된 경로의 경우, 큐로 값을 빼고 다시 뺀 값을 집어넣으면, 규칙을 만족함. (ArrayList<Queue<Integer>>)
    
2. 알고리즘
    
    Rotation() : 거쳐간 경로에 대해서, 큐의 순회를 나타냄
    
    TN(int[] target) : target[]을 만족하는 지는 횟수로 알 수 있음.  예를 들어 노드 4의 값이 5여야 한다면, count ≤ 5 ≤count*3(count=방문횟수)를 만족하면 count를 잘 조합해서 5의 값을 만족하는게 가능. TN()은 이를 위한 구현함
    
    방문횟수를 전부 구하고 나면? : 숫자를 어떻게 첨가했는지 오름차순으로 정렬해야함
    
    1) target-1 ≤ count*3 : 배열에 1 추가
    
    2) target-2 ≤ count*3 : 배열에 2 추가
    
    3) else : 배열에 3 추가
    
    위 방법을 통해, 방문 노드를 기록한 array를 순회하며, 위 조건대로 answer[]에 원소를 추가함
