## 문제 유형

- DP

## 문제 접근

- 답
    - N,M 좌표로 도착했을 때, 최대 가치 얻기
- 주어지는 정보
    - Map 최대 크기 1,000,000 (N*M)
    - 각 좌표의 가치 -100 ~ 100
    - Move는 오른쪽, 왼쪽, 아래 방향만 가능
- 정보 정리
    - 완전 탐색
        - 시도했으나 실패
    - 남는 후보
        - 그리디 : 불가능
            - 인접한 좌표에 대한 최선의 값을 찾을 시, 최대값은 구할 수 없음
        - DP : 가능
            - https://velog.io/@mong7399/java-2169번-로봇-조종하기
- DP
    - Move의 방향이 오른쪽, 아래, 왼쪽만 가능하다는 것을 응용한다
    1. 이동 지점에 대해서, 1, 2번 방향 중 더 높은 값을 저장한다
temp[0][0] = dp[i-1][0] + map[i][0];
for(int j = 1; j<M; j++)
{
    temp[0][j] = Math.max(dp[i-1][j], temp[0][j-1]) + map[i][j];
}


2. 이동 지점에 대해서, 1, 2번 방향 중 더 높은 값을 저장한다
temp[1][M-1] = dp[i-1][M-1] + map[i][M-1];
for(int j = M-2; j>=0; j--)
{
    temp[1][j] = Math.max(dp[i-1][j], temp[1][j+1]) + map[i][j];



3. 1, 2단계 중에서 더 높은 값을 최종 값으로 지정한다

  for(int j = 0; j<M; j++)
{
    dp[i][j] = Math.max(temp[0][j], temp[1][j]);
}
